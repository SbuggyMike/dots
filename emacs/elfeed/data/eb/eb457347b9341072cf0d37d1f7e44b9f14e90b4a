<details class="toc-inpage d-print-none " open="open">
Table of Contents
<nav id="TableOfContents">
<ul>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#emacs-use-package-and-straight-in-short">Emacs, use-package and straight in short.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#what-is-configuration-exportability">What is configuration exportability?</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#beyond-exportability-straight">Beyond exportability: “straight”.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#configuring-straight">Configuring “straight”.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#configuration-of-use-package">Configuration of “use-package”.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#little-example-with-little-analysis">Little example with little analysis.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#list-of-applications-in-my-configuration-file">List of applications in my configuration file.</a></li>
<li><a href="https://francopasut.netlify.app/tag/emacs/index.xml#and-now">And now?</a></li>
</ul>
</nav>
</details>
<h2 id="emacs-use-package-and-straight-in-short">Emacs, use-package and straight in short.</h2>
<p>Emacs uses the GNU ELPA (Emacs Lisp Package Archive) for updating installed packages.</p>
<p>MELPA (Milkypostman’s Emacs Lisp Package Archive) is, on the other hand, an unofficial manager with numerous other packages and must be installed by following the <a href="https://melpa.org/#/getting-started" rel="noopener" target="_blank">directions on this page</a>.</p>
<p>The original methods for installing packages are as follows:</p>
<ul>
<li><code>M-x package-install &lt;RET&gt; package-name &lt;RET&gt;</code></li>
<li><code>M-x package-list-packages &lt;RET&gt;</code> followed by <code>i</code> on the desired packages and <code>x</code> for the actual installation of the selected packages.</li>
</ul>
<p>To update packages you open the <em>package-list</em> above and press <code>U</code> followed by <code>x</code>.</p>
<p>All very simple and efficient.</p>
<p>There is only one small problem: <strong>the configuration is not exportable</strong>.</p>
<h2 id="what-is-configuration-exportability">What is configuration exportability?</h2>
<p>Anyone who uses Vim are well aware of the concept of <em>configuration exportability</em>: just write the configuration in <em>.vimrc</em> and you automatically have the system update through your <em>plugin-manager</em>.</p>
<p>In “native” Emacs it doesn’t work that way, but you can achieve a similar result through <em>use-package</em>: a package that simplifies the configuration of other packages.</p>
<p>In summary: instead of having to write the configuration for each package explicitly, you can use the “use-package” syntax to declare the packages you want to use and their configuration.</p>
<p>The “use-package” method ensures that ELPA or MELPA packages are installed, if they are not already, and allows you to specify their configuration clearly and concisely.</p>
<p>In summary: ELPA and MELPA are the package managers, and “use-package” is a package that simplifies the handling of packages from those managers.</p>
<h2 id="beyond-exportability-straight">Beyond exportability: “straight”.</h2>
<p>At this point we can take one more step: change the package manager to <em>straight</em>.</p>
<p>Unlike other package managers, such as “package.el” or “el-get,” “straight” uses a directory structure dedicated to packages, rather than installing them in the Emacs system directory.</p>
<p>This makes it easier to manage dependencies and provides greater system stability and allows, via GIT, the installation of packages not found in ELPA or MELPA.</p>
<p>Below is the configuration of Emacs to use “<em>use-package</em>” and “<em>straight</em>”.</p>
<h2 id="configuring-straight">Configuring “straight”.</h2>
<p>Here is the configuration code to install “straight” in Emacs:</p>
<div class="highlight"><pre class="chroma" tabindex="0"><code class="language-elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defvar</span> <span class="nv">bootstrap-version</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">let</span> <span class="p">((</span><span class="nv">bootstrap-file</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nf">expand-file-name</span> <span class="s">"straight/repos/straight.el/bootstrap.el"</span> <span class="nv">user-emacs-directory</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">bootstrap-version</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nf">file-exists-p</span> <span class="nv">bootstrap-file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">with-current-buffer</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">url-retrieve-synchronously</span>
</span></span><span class="line"><span class="cl"> <span class="s">"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"</span>
</span></span><span class="line"><span class="cl"> <span class="ss">'silent</span> <span class="ss">'inhibit-cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nf">goto-char</span> <span class="p">(</span><span class="nf">point-max</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">eval-print-last-sexp</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nf">load</span> <span class="nv">bootstrap-file</span> <span class="no">nil</span> <span class="ss">'nomessage</span><span class="p">))</span>
</span></span></code></pre></div><h2 id="configuration-of-use-package">Configuration of “use-package”.</h2>
<p>The following code includes “use-package” in the configuration:</p>
<div class="highlight"><pre class="chroma" tabindex="0"><code class="language-elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">straight-use-package</span> <span class="ss">'use-package</span><span class="p">)</span>
</span></span></code></pre></div><p>Lastly: code to “force” <em>use-package</em> to use <em>straight.el</em> as package manager:</p>
<div class="highlight"><pre class="chroma" tabindex="0"><code class="language-elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">straight</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:custom</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">straight-use-package-by-default</span> <span class="no">t</span><span class="p">))</span>
</span></span></code></pre></div><p>The above code ensures that “use-package” is always installed using “straight”, <strong>even without the string <em>straight t</em></strong>, and enables the use of “use-package” for package configuration.</p>
<h2 id="little-example-with-little-analysis">Little example with little analysis.</h2>
<p>For example, to install the “magit” package, the configuration can be written as follows:</p>
<div class="highlight"><pre class="chroma" tabindex="0"><code class="language-elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">magit</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:bind</span> <span class="p">((</span><span class="s">"C-x g"</span> <span class="o">.</span> <span class="nv">magit-status</span><span class="p">)))</span>
</span></span></code></pre></div><p>In this example, ““use-package” declares the package “magit”. Also, a quick bind is configured for opening “magit-status” with the <code>C-x g</code> key combination.</p>
<p>As anticipated, it is not necessary to enter the code <code>:straight t</code> having previously “forced” <em>use-package</em> to use such a <em>default</em> handler.</p>
<h2 id="list-of-applications-in-my-configuration-file">List of applications in my configuration file.</h2>
<p>After the above configuration part, I add a selection of self-installing applications with the above technique (tested in GNU/Linux distributions Ubuntu, Debian, EndeavourOS):</p>
<div class="highlight"><pre class="chroma" tabindex="0"><code class="language-elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">markdown-mode</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:mode</span> <span class="p">(</span><span class="s">"README\\.md\\'"</span> <span class="o">.</span> <span class="nv">gfm-mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:init</span> <span class="p">(</span><span class="nb">setq</span> <span class="nv">markdown-command</span> <span class="s">"multimarkdown"</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">htmlize</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">evil</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:bind</span> <span class="p">((</span><span class="s">"&lt;escape&gt;"</span> <span class="o">.</span> <span class="nv">keyboard-escape-quit</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:config</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nv">evil-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nb">setq</span> <span class="nv">evil-default-state</span> <span class="ss">'emacs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">evil-surround</span>
</span></span><span class="line"><span class="cl"><span class="nb">:config</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">global-evil-surround-mode</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">switch-window</span>
</span></span><span class="line"><span class="cl"><span class="c1">;; :straight t</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:bind</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x o"</span> <span class="o">.</span> <span class="nv">switch-window</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 1"</span> <span class="o">.</span> <span class="nv">switch-window-then-maximize</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 2"</span> <span class="o">.</span> <span class="nv">switch-window-then-split-below</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 3"</span> <span class="o">.</span> <span class="nv">switch-window-then-split-right</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 0"</span> <span class="o">.</span> <span class="nv">switch-window-then-delete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 d"</span> <span class="o">.</span> <span class="nv">switch-window-then-dired</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 f"</span> <span class="o">.</span> <span class="nv">switch-window-then-find-file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 m"</span> <span class="o">.</span> <span class="nv">switch-window-then-compose-mail</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 r"</span> <span class="o">.</span> <span class="nv">switch-window-then-find-file-read-only</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 C-f"</span> <span class="o">.</span> <span class="nv">switch-window-then-find-file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 C-o"</span> <span class="o">.</span> <span class="nv">switch-window-then-display-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-x 4 0"</span> <span class="o">.</span> <span class="nv">switch-window-then-kill-buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">avy</span>
</span></span><span class="line"><span class="cl"> <span class="nb">:bind</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-;"</span> <span class="o">.</span> <span class="nv">avy-goto-char</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"C-c C-;"</span> <span class="o">.</span> <span class="nv">avy-goto-char-2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="s">"M-g w"</span> <span class="o">.</span> <span class="nv">avy-goto-word-1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">use-package</span> <span class="nv">org</span>
</span></span><span class="line"><span class="cl"><span class="nb">:init</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-log-done</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-agenda-files</span> <span class="o">'</span><span class="p">(</span><span class="s">"~/org"</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">:bind</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s">"\C-cl"</span> <span class="o">.</span> <span class="nv">org-store-link</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="s">"\C-ca"</span> <span class="o">.</span> <span class="nv">org-agenda</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">"C-x C-b"</span><span class="p">)</span> <span class="ss">'ibuffer</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="and-now">And now?</h2>
<p>Thus, with the same syntax, it is possible to add a virtually infinite set of applications and export the current configuration in a self-installing way simply by copying the related code.</p>
<p>Thank you for your attention.</p>