<!-- SC_OFF --><div class="md"><p>I tested to see how much I could improve performance by compiled my own Emacs on Windows. </p> <h1>Hardware and OS</h1> <p>CPU : Ryzen 5800X OS: Windows 11 Pro 10.0.22621</p> <p>Mostly CPU is the only relevant hardware here.</p> <h1>Emacs environment</h1> <p>Custom-built binary: Emacs master branch, commit a57a8b. I built using the <code>configure</code> flags in this guide: <a href="https://www.reddit.com/r/emacs/comments/131354i/guide_compile_your_own_emacs_to_make_it_really/">https://www.reddit.com/r/emacs/comments/131354i/guide_compile_your_own_emacs_to_make_it_really/</a></p> <p>Prebuilt binary: Download the official website, commit bc61a1: <a href="https://alpha.gnu.org/gnu/emacs/pretest/windows/emacs-30/">https://alpha.gnu.org/gnu/emacs/pretest/windows/emacs-30/</a></p> <p>I tried to build from source with the same commit, but it failed. Both differ not too much anyway.</p> <p>Both run the same <code>.emacs.d</code> and all built-in Elisp libraries are compiled to <code>eln</code>.</p> <h1>Benchmarks</h1> <h2>Fibonacci 40</h2> <p>Elisp code, tested in scratch buffer:</p> <p>``` (defun fibonacci(n) (if (&lt;= n 1) n (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))</p> <p>(setq native-comp-speed 3) (native-compile #&#39;fibonacci) (let ((time (current-time))) (fibonacci 40) (message &quot;%.06f&quot; (float-time (time-since time))))</p> <p>```</p> <p>The result:</p> <p>On average, the custom built binary took 2.6 seconds to finish, while the prebuilt binary took 2.9 seconds.</p> <h2>Typing latency</h2> <p>I used the <code>Typometer</code> tool to measure the latency. For reference: <a href="https://pavelfatin.com/typing-with-pleasure/">Typing with pleasure</a>. Back in the day, Emacs latency is pretty high. But now, it&#39;s almost as fast as Notepad!</p> <p>You can download the tool here: <a href="https://github.com/pavelfatin/typometer">https://github.com/pavelfatin/typometer</a></p> <p>The results for text files:</p> <p>For the custom Emacs: Min: 3.9 ms, Max: 20 ms, Avg: 9.7 ms, SD: 3.3 ms</p> <p>For the prebuilt Emacs: Min: 7.4 ms, Max: 19.2 ms, Avg: 12.0 ms, SD: 1.9 ms</p> <p>In general, typing on the prebuilt version is slightly snappier. </p> <p><a href="https://i.imgur.com/Anu8R8H.png">Custom screenshot</a></p> <p><a href="https://i.imgur.com/3vggdea.png">Prebuilt screenshot</a></p> <p>For XML files, the min latency is 8.7, but the max latency is around 20.x. Probably both are compiled with <code>libxml</code> support. Other modes with <code>tree-sitter</code> support are also fast.</p> <h2>Elisp benchmark</h2> <p>I installed the package <code>elisp-benchmarks</code> and run <code>elisp-benchmarks-run</code> command.</p> <p><a href="https://i.imgur.com/wPrZuzt.png">Custom Emacs</a></p> <p><a href="https://i.imgur.com/gjkt1zK.png">Pre-built Emacs</a></p> <h2>Opening a text file with a single 10MB line</h2> <p>Both are fast to open and operate on the text file. Editors like vi in Git bash and others simply freeze and hang. Kudo to the improvements Emacs made over the years and I take it for granted!</p> <p>You can download and test with the file here: <a href="https://www.mediafire.com/file/7fx6dp3ss9cvif8/out.txt/file">https://www.mediafire.com/file/7fx6dp3ss9cvif8/out.txt/file</a></p> <h1>Conclusion</h1> <p>The custom-built version does speed up compared to the pre-built version, around 5-20%. However, if you use <code>-O2</code> flags, you will get the same speed as the prebuilt. </p> <p>Though, if you have an older and slower CPU, it is worth it to get the extra performance from the custom-built Emacs.</p> <p>If you run the benchmarks, please share your benchmark results here. I&#39;m curious.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/tuhdo"> /u/tuhdo </a> <br/> <span><a href="https://www.reddit.com/r/emacs/comments/131qmkk/custombuilt_emacs_vs_prebuilt_emacs_benchmarks/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/emacs/comments/131qmkk/custombuilt_emacs_vs_prebuilt_emacs_benchmarks/">[comments]</a></span>