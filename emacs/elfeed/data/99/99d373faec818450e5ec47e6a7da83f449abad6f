<!-- SC_OFF --><div class="md"><pre><code>(defun ntf/mode-line-format (left right) &quot;Return a string of `window-width&#39; length. Containing LEFT, and RIGHT aligned respectively.&quot; (let ((available-width (- (window-width) (length left) 1))) (format (format &quot;%%s %%%ds &quot; available-width) left right))) (defface evil-mode-line-face &#39;((t (:foreground &quot;black&quot; :background &quot;orange&quot;))) &quot;Face for evil mode-line colors.&quot;) (setq-default mode-line-format &#39;((:eval (ntf/mode-line-format ;; left portion (format-mode-line (quote (&quot;%e&quot; (:eval (when (bound-and-true-p evil-local-mode) (propertize (concat &quot; &quot; (upcase (substring (symbol-name evil-state) 0 1)) (substring (symbol-name evil-state) 1) &quot; &quot;) &#39;face &#39;evil-mode-line-face))) &quot; &quot; (:eval (when (buffer-modified-p) &quot;[+]&quot;)) &quot; &quot; mode-line-buffer-identification &quot; %l:%c&quot;))) ;; right portion (format-mode-line (quote (&quot;%m &quot; (vc-mode vc-mode)))))))) </code></pre> <p>Here is the result:</p> <p>&#x200B;</p> <p><a href="https://preview.redd.it/7osmtkb0avwa1.png?width=1356&amp;format=png&amp;auto=webp&amp;s=63068523eac6811975c9ec4828252ced762b34f5">https://preview.redd.it/7osmtkb0avwa1.png?width=1356&amp;format=png&amp;auto=webp&amp;s=63068523eac6811975c9ec4828252ced762b34f5</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/notthatfellow"> /u/notthatfellow </a> <br/> <span><a href="https://www.reddit.com/r/emacs/comments/1333621/wrote_a_custom_modeline_with_some_help_from/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/emacs/comments/1333621/wrote_a_custom_modeline_with_some_help_from/">[comments]</a></span>