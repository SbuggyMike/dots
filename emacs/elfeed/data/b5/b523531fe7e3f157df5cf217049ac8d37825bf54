<p>Marcin Borkowski (mbork) has an instructive post based on a <a href="https://lists.gnu.org/archive/html/emacs-humanities/2023-04/msg00000.html">question</a> in the <a href="https://lists.gnu.org/archive/html/emacs-humanities/">emacs-humanities</a> mailing list. The question that Borkowski addresses is <a href="https://mbork.pl/2023-04-15_Downcasing_word_at_point_in_the_whole_buffer">how to replace every occurrence of a word in a buffer with its downcased version without typing the word twice</a>. Borkowski solves this problem by writing a bit of Elisp.</p>
<p>In a sense, his solution is silly—as even he admits—because there are pretty easy ways of doing this with built-in commands as a couple of the respondents replied. Still, Borkowski’s solution serves as a nice example of writing a bit of Elisp to solve a simple problem.</p>
<p>As usual, Borkowski shows us the scaffolding. By that I mean that he doesn’t just show us a solution but the steps—and missteps—he took arriving at it. That’s why it’s an instructive post. The main thing you learn from the post is how to search through a buffer for a given regex and replace it with something else. That’s basically the interactive <code>query-replace-regexp</code> but you’re not supposed to call that directly from Elisp for various reasons.</p>
<p>Borkowski gives us the template for this sort of operation and makes it obvious how to change the operation on the target or add other steps. It’s a nice post and worth reading even if you’re already conversant with Elisp.</p>