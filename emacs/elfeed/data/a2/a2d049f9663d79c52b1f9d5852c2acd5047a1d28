<p>John D. Cook, a consulting mathematician, who runs the <a href="https://twitter.com/TeXtip">TeX and Typography</a> Twitter feed as well as several similar—mostly mathematically focused—feeds has <a href="https://www.johndcook.com/blog/2022/08/02/org-babel-vs-jupyter/">two</a> <a href="https://www.johndcook.com/blog/2022/08/03/inline-org-babel/">posts</a> that consider using Org-mode instead of Jupyter Notebook. It’s interesting because it comes from someone who is neither a developer nor a dedicated Org user.</p>
<p>The <a href="https://www.johndcook.com/blog/2022/08/02/org-babel-vs-jupyter/">first post</a> considers Org-mode as a light weight Jupyter Notebook. It stresses how easy it is to mix text, LaTeX markup, code, and the results of running that code in a single file. That’s a real win if you’re trying to do reproducible research or simply trying to simplify your workflow. Since everything is text, it’s easy to integrate it into your version control system.</p>
<p>The <a href="https://www.johndcook.com/blog/2022/08/03/inline-org-babel/">second post</a> is reminiscent of <a href="https://irreal.org/blog/?p=8452">Mike Hamrick’s video</a> of using Org and Org Babel to create documents that automatically maintain their consistency as parameters change. Cook’s post covers exactly that: how to specify parameters separately from their use in order to maintain consistency as things change.</p>
<p>If you’re a hardcore Emacs/Org user or even a long time Irreal reader, none of this will be new to you but it’s a really excellent introduction to one tiny aspect of Org’s power. It’s definitely worth your while if you’re new to this aspect of Org-mode.</p>