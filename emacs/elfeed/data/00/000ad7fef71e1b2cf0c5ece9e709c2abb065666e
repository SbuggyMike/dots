<!-- SC_OFF --><div class="md"><p>I have the following function that creates a new buffer and calls a compilation watcher asynchronously in it. This means that every time I save the file I&#39;m working on the watcher will compile it and returns the result:</p> <p><code>elisp (defun dune-watch (exe) &quot;Will call dune build -w EXE on an async process.&quot; (interactive &quot;sBuild name: &quot;) (let ((buffer (get-buffer-create &quot;Dune watch&quot;))) (with-current-buffer buffer (compilation-minor-mode t)) (projectile-run-async-shell-command-in-root (concat &quot;dune build -w &quot; exe) buffer) ;; Make this process non blocking for killing (set-process-query-on-exit-flag (get-buffer-process buffer) nil) (display-buffer buffer &#39;((display-buffer-below-selected display-buffer-at-bottom) (inhibit-same-window . t) (window-height . 0.2))))) </code></p> <p>A normal run will look like this (lines preceded by <code>#</code> were added by me):</p> <p>``` Success, waiting for filesystem changes...</p> <h1>save file</h1> <p>********** NEW BUILD (src/ident.ml changed) **********</p> <p>File &quot;src/ident.ml&quot;, line 46, characters 46-48: 46 | let compare t1 t2 = String.compare t1.name t2.na <sup>^</sup> Error: Unbound record field na Had errors, waiting for filesystem changes...</p> <h1>save file</h1> <p>********** NEW BUILD (src/ident.ml changed) **********</p> <p>Success, waiting for filesystem changes... ```</p> <p>Now, this doesn&#39;t suit me really well because it messes up with the compilation buffer regexp alist so I tried erasing the buffer any time I save a file:</p> <p>```elisp (defun erase-and-fill-buffer (buffer) &quot;Blahblah BUFFER.&quot; (with-current-buffer buffer (erase-buffer) (insert &quot;Dune watch buffer&quot;) ))</p> <p>(defun dune-watch (exe) &quot;Will call dune build -w EXE on an async process.&quot; (interactive &quot;sBuild name: &quot;) (let ((buffer (get-buffer-create &quot;Dune watch&quot;))) (add-hook &#39;before-save-hook (lambda () (erase-and-fill-buffer buffer))) (with-current-buffer buffer (compilation-minor-mode t)) (projectile-run-async-shell-command-in-root (concat &quot;dune build -w &quot; exe) buffer) ;; Make this process non blocking for killing (set-process-query-on-exit-flag (get-buffer-process buffer) nil) (display-buffer buffer &#39;((display-buffer-below-selected display-buffer-at-bottom) (inhibit-same-window . t) (window-height . 0.2))))) ```</p> <p>But to my surprise, this doesn&#39;t work. Remember that <code>dune build -w</code> is only executed when a file is saved and I&#39;m hooking to <code>before-save-hook</code>. Here&#39;s the whole content of the buffer: - after first save: <code> Success, waiting for filesystem changes... Dune watch buffer </code> - after second save ``` ********** NEW BUILD (src/ident.ml changed) **********</p> <p>File &quot;src/ident.ml&quot;, line 46, characters 46-47: 46 | let compare t1 t2 = String.compare t1.name t2.n ^ Error: Unbound record field n Had errors, waiting for filesystem changes... Dune watch buffer ```</p> <p>My insert comes after the asynchronous call even though this call should have happened after the file was saved. I tried to output the result of the asynchronous call in another buffer but I encounter the same problem since I don&#39;t know how to copy only the last displayed message and not the whole buffer without erasing it.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/MonsieurPi"> /u/MonsieurPi </a> <br/> <span><a href="https://www.reddit.com/r/emacs/comments/wddqj0/change_buffer_before_async_call_returns_its_result/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/emacs/comments/wddqj0/change_buffer_before_async_call_returns_its_result/">[comments]</a></span>