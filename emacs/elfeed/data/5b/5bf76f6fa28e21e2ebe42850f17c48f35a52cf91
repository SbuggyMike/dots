<p>After publishing the last post I’ve thought why won’t I post such things here occasionally?
I have a few pieces of Emacs Lisp in my configuration that I wrote for myself some time ago to fix some annoyances or improve a certain workflow.
Previously I’ve used literate approach for my Emacs configuration which listed all these notes, but it was tedious to maintain, so I’ve opted out for a simpler <code>init.el</code>.
But I still would like to share some pieces in a more elaborated form.
Moreover, I’ve already <a href="https://andreyorst.gitlab.io/posts/2020-05-01-dynamic-title-for-treemacs-workspace/">done</a> <a href="https://andreyorst.gitlab.io/posts/2020-05-07-making-emacs-tabs-work-like-in-atom/">it</a> <a href="https://andreyorst.gitlab.io/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/">before</a>, and now, since I don’t use these packages, it’s easier to find these in a more organized place, than search in the commit history.</p>
<p>One of such things that I’d like to share is a configuration of the inbuilt <code>project.el</code>, that makes it a bit more pleasant to work with.</p>
<h2 id="finding-project-root-based-on-specific-root-markers">Finding project root based on specific root-markers</h2>
<p>Long ago I’ve added a function that searches for a project root a bit differently from how <code>project.el</code> does it by default.
It does so by searching for specific files, that I’ve specified like this:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">defcustom</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-root-markers</span>
</span></span><span style="display: flex;"><span>  '(<span style="color: #666; font-style: italic;">"Cargo.toml"</span> <span style="color: #666; font-style: italic;">"compile_commands.json"</span> <span style="color: #666; font-style: italic;">"compile_flags.txt"</span>
</span></span><span style="display: flex;"><span>    <span style="color: #666; font-style: italic;">"project.clj"</span> <span style="color: #666; font-style: italic;">".git"</span> <span style="color: #666; font-style: italic;">"deps.edn"</span> <span style="color: #666; font-style: italic;">"shadow-cljs.edn"</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Files or directories that indicate the root of a project."</span>
</span></span><span style="display: flex;"><span>  <span style="font-weight: bold; font-style: italic;">:type</span> '(<span style="color: #666; font-weight: bold; font-style: italic;">repeat</span> <span style="color: #666; font-weight: bold; font-style: italic;">string</span>)
</span></span><span style="display: flex;"><span>  <span style="font-weight: bold; font-style: italic;">:group</span> <span style="color: #666; font-style: italic;">'project</span>)
</span></span></code></pre></div><p>You may wonder why I’ve included <code>.git</code> as a project marker, but I often work with submodules, and I want such submodules to be treated as separate projects.
The default <code>project-try-vc</code> treats submodules as part of a bigger project, which is logical, I guess, but I want it to act a bit different.
And since not all of my submodules have one of the specified markers, it’s easy to search for git directory and be done with it.</p>
<p>Next, we need a function that checks if a given path has any of these markers:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">defun</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-root-p</span> (<span style="color: #666; font-weight: bold; font-style: italic;">path</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Check if the current PATH has any of the project root markers."</span>
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">catch</span> <span style="color: #666; font-style: italic;">'found</span>
</span></span><span style="display: flex;"><span>    (<span style="font-weight: bold; font-style: italic;">dolist</span> (<span style="color: #666; font-weight: bold; font-style: italic;">marker</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-root-markers</span>)
</span></span><span style="display: flex;"><span>      (<span style="font-weight: bold; font-style: italic;">when</span> (<span style="color: #666; font-weight: bold; font-style: italic;">file-exists-p</span> (<span style="color: #666; font-weight: bold; font-style: italic;">concat</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span> <span style="color: #666; font-weight: bold; font-style: italic;">marker</span>))
</span></span><span style="display: flex;"><span>        (<span style="font-weight: bold; font-style: italic;">throw</span> <span style="color: #666; font-style: italic;">'found</span> <span style="color: #666; font-weight: bold; font-style: italic;">marker</span>)))))
</span></span></code></pre></div><p>Nothing fancy, just a linear search for any of the markers under the current directory.
The search terminates as soon as one of the files is found.</p>
<p>The main piece here is the <code>project-find-root</code> function:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">defun</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-find-root</span> (<span style="color: #666; font-weight: bold; font-style: italic;">path</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Search up the PATH for </span><span style="color: #666; font-style: italic;">`project-root-markers'</span><span style="color: #666; font-style: italic;">."</span>
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">let</span> ((<span style="color: #666; font-weight: bold; font-style: italic;">path</span> (<span style="color: #666; font-weight: bold; font-style: italic;">expand-file-name</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span>)))
</span></span><span style="display: flex;"><span>    (<span style="font-weight: bold; font-style: italic;">catch</span> <span style="color: #666; font-style: italic;">'found</span>
</span></span><span style="display: flex;"><span>      (<span style="font-weight: bold; font-style: italic;">while</span> (<span style="color: #666; font-weight: bold; font-style: italic;">not</span> (<span style="color: #666; font-weight: bold; font-style: italic;">equal</span> <span style="color: #666; font-style: italic;">"/"</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span>))
</span></span><span style="display: flex;"><span>        (<span style="font-weight: bold; font-style: italic;">if</span> (<span style="color: #666; font-weight: bold; font-style: italic;">not</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-root-p</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span>))
</span></span><span style="display: flex;"><span>            (<span style="font-weight: bold; font-style: italic;">setq</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span> (<span style="color: #666; font-weight: bold; font-style: italic;">file-name-directory</span> (<span style="color: #666; font-weight: bold; font-style: italic;">directory-file-name</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span>)))
</span></span><span style="display: flex;"><span>          (<span style="font-weight: bold; font-style: italic;">throw</span> <span style="color: #666; font-style: italic;">'found</span> (<span style="color: #666; font-weight: bold; font-style: italic;">cons</span> <span style="color: #666; font-style: italic;">'transient</span> <span style="color: #666; font-weight: bold; font-style: italic;">path</span>)))))))
</span></span><span style="display: flex;"><span>(<span style="color: #666; font-weight: bold; font-style: italic;">add-to-list</span> <span style="color: #666; font-style: italic;">'project-find-functions</span> <span style="color: #666; font-weight: bold; font-style: italic;">#'</span><span style="color: #666; font-weight: bold; font-style: italic;">project-find-root</span>)
</span></span></code></pre></div><p>As can be seen, this function is added to the list of <code>project-find-functions</code>, and all it does is simply looking for a marker file in the current directory, and if it is not found it goes up the directory.
If file is found, it returns a <code>(transient . "path/to/root")</code> that <code>project.el</code> expects.
In practice, with this function early enough in the list, <code>project-try-vc</code> is never called, and I get very predictable project roots.</p>
<h2 id="saving-only-project-buffers-before-compilation">Saving only project buffers before compilation</h2>
<p>I often use project’s commands, defined under the <code>project-prefix-map</code>.
One of these is <code>project-compile</code>, which I use for all sorts of things, from running tests, to deploying.
However, it has an annoying habit to ask whether I want to save some buffers before I run any command.
Why yes, I want to save some buffers, but only if they belong to the current project!
So let’s fix this:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">defun</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-save-some-buffers</span> (<span style="font-weight: bold;">&amp;optional</span> <span style="color: #666; font-weight: bold; font-style: italic;">arg</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Save some modified file-visiting buffers in the current project.
</span></span></span><span style="display: flex;"><span><span style="color: #666; font-style: italic;">
</span></span></span><span style="display: flex;"><span><span style="color: #666; font-style: italic;">Optional argument ARG (interactively, prefix argument) non-nil
</span></span></span><span style="display: flex;"><span><span style="color: #666; font-style: italic;">means save all with no questions."</span>
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">interactive</span> <span style="color: #666; font-style: italic;">"P"</span>)
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">let*</span> ((<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-current</span>)))
</span></span><span style="display: flex;"><span>         (<span style="color: #666; font-weight: bold; font-style: italic;">pred</span> (<span style="font-weight: bold; font-style: italic;">lambda</span> () (<span style="color: #666; font-weight: bold; font-style: italic;">memq</span> (<span style="color: #666; font-weight: bold; font-style: italic;">current-buffer</span>) <span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span>))))
</span></span><span style="display: flex;"><span>    (<span style="color: #666; font-weight: bold; font-style: italic;">funcall-interactively</span> <span style="color: #666; font-weight: bold; font-style: italic;">#'</span><span style="color: #666; font-weight: bold; font-style: italic;">save-some-buffers</span> <span style="color: #666; font-weight: bold; font-style: italic;">arg</span> <span style="color: #666; font-weight: bold; font-style: italic;">pred</span>)))
</span></span></code></pre></div><p>Just a simple function that obtains current project, queries all project buffers, and creates a custom predicate for the <code>save-some-buffers</code> function.
I’m not sure why <code>project.el</code> doesn’t do it by itself, but we can always advise things:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">define-advice</span> <span style="color: #666; font-weight: bold; font-style: italic;">project-compile</span> (<span style="font-weight: bold; font-style: italic;">:around</span> (<span style="color: #666; font-weight: bold; font-style: italic;">fn</span>) <span style="color: #666; font-weight: bold; font-style: italic;">save-project-buffers</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Only ask to save project-related buffers."</span>
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">let*</span> ((<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-current</span>)))
</span></span><span style="display: flex;"><span>         (<span style="color: #666; font-weight: bold; font-style: italic;">compilation-save-buffers-predicate</span>
</span></span><span style="display: flex;"><span>          (<span style="font-weight: bold; font-style: italic;">lambda</span> () (<span style="color: #666; font-weight: bold; font-style: italic;">memq</span> (<span style="color: #666; font-weight: bold; font-style: italic;">current-buffer</span>) <span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span>))))
</span></span><span style="display: flex;"><span>    (<span style="color: #666; font-weight: bold; font-style: italic;">funcall</span> <span style="color: #666; font-weight: bold; font-style: italic;">fn</span>)))
</span></span></code></pre></div><p>This fixes only half of the problem, however.</p>
<p>Imagine, you’re running tests by calling <code>project-compile</code> and one of the tests fails.
You look in the <code>*compilation*</code> buffer why is it failed, and fix it.
Then you go to the <code>*compilation*</code> buffer once again, and hit the <kbd>g</kbd> key to re-run tests.
But instead of running tests, you’re being asked if you want to save some buffers, even though you’ve saved all buffers in the project beforehand.
Turns out, <kbd>g</kbd> simply calls the <code>recompile</code> function, which knows nothing about project, and will prompt you to save buffers, that aren’t in the project and are unsaved.
This, once again, can be fixed with a piece of advice:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span>(<span style="font-weight: bold; font-style: italic;">define-advice</span> <span style="color: #666; font-weight: bold; font-style: italic;">recompile</span> (<span style="font-weight: bold; font-style: italic;">:around</span> (<span style="color: #666; font-weight: bold; font-style: italic;">fn</span> <span style="font-weight: bold;">&amp;optional</span> <span style="color: #666; font-weight: bold; font-style: italic;">edit-command</span>) <span style="color: #666; font-weight: bold; font-style: italic;">save-project-buffers</span>)
</span></span><span style="display: flex;"><span>  <span style="color: #666; font-style: italic;">"Only ask to save project-related buffers if inside a project."</span>
</span></span><span style="display: flex;"><span>  (<span style="font-weight: bold; font-style: italic;">if</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-current</span>)
</span></span><span style="display: flex;"><span>      (<span style="font-weight: bold; font-style: italic;">let*</span> ((<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span> (<span style="color: #666; font-weight: bold; font-style: italic;">project-current</span>)))
</span></span><span style="display: flex;"><span>             (<span style="color: #666; font-weight: bold; font-style: italic;">compilation-save-buffers-predicate</span>
</span></span><span style="display: flex;"><span>              (<span style="font-weight: bold; font-style: italic;">lambda</span> () (<span style="color: #666; font-weight: bold; font-style: italic;">memq</span> (<span style="color: #666; font-weight: bold; font-style: italic;">current-buffer</span>) <span style="color: #666; font-weight: bold; font-style: italic;">project-buffers</span>))))
</span></span><span style="display: flex;"><span>        (<span style="color: #666; font-weight: bold; font-style: italic;">funcall</span> <span style="color: #666; font-weight: bold; font-style: italic;">fn</span> <span style="color: #666; font-weight: bold; font-style: italic;">edit-command</span>))
</span></span><span style="display: flex;"><span>    (<span style="color: #666; font-weight: bold; font-style: italic;">funcall</span> <span style="color: #666; font-weight: bold; font-style: italic;">fn</span> <span style="color: #666; font-weight: bold; font-style: italic;">edit-command</span>)))
</span></span></code></pre></div><p>We simply check if current <code>*compilation*</code> buffer is a part of a project, since and do the same trick, setting <code>compilation-save-buffers-predicate</code> to our custom predicate that is aware of the project.
This, however, works best when you customize the <code>project-compilation-buffer-name-function</code> to use <code>project-prefixed-buffer-name</code>, so you can compile multiple projects, and it won’t be confusing when to save what buffers.</p>