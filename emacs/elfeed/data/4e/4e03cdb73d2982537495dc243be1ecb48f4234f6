<p>Mickey from <a href="https://www.masteringemacs.org">Mastering Emacs</a> has an excellent post on the various <a href="https://www.masteringemacs.org/article/evaluating-elisp-emacs">ways of evaluating Elisp in Emacs</a>. As Mickey says, there are several ways of doing it depending on the context and it pays to be familiar with them all.</p>
<p>The most familiar way is probably <code>eval-last-sexp</code> (<kbd>Ctrl</kbd>+<kbd>x</kbd> <kbd>Ctrl</kbd>+<kbd>e</kbd>). It’s really useful because it will evaluate almost anything: s-expressions (of course) but also numbers, strings, and most special forms. The situation for special forms has improved a bit in Emacs 28 so be sure to take a look at Mickey’s post to get the details.</p>
<p>There’s also <code>eval-buffer</code> and <code>eval-region</code>, which do as their names suggest. These commands generally don’t evaluate special forms such as <code>devar</code>, <code>defface</code>, and <code>defcustom</code>. That’s generally what you want so it’s a feature instead of a bug. Again, see the post for the details.</p>
<p>The method that I always tend to forget about is <code>eval-defun</code>, bound to <kbd>Ctrl</kbd>+<kbd>Meta</kbd>+<kbd>x</kbd>. It’s especially handy for evaluating functions because, unlike <code>eval-last-sexp</code>, you can call it from anywhere within the function instead of needing to be at the end. If you call it with the universal argument, it will turn on debugging for the function. It’s worth reading Mickey’s article just for the section on this command.</p>
<p>Finally, there’s Eshell and IELM. Most Eshell users know you can evaluate many Elisp expressions there but when you want a real Elisp REPL, IELM is what you want. It’s perfect for experimenting with code that’s longer than a single expression. I use it fairly often and love it.</p>
<p>Like all of Mickey’s posts, this one is definitely worth your time and effort.</p>