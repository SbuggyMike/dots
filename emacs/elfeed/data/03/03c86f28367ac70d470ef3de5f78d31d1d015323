<!-- SC_OFF --><div class="md"><p>“kintegrityd” is a kernel thread based on a workqueue (<a href="https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L455">https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L455</a>) which is responsible for verifying the integrity of block devices by reading/writing data from/to them. The function which is executed by the workqueue is “bio_integrity_verify_fn”</p> <p>(<a href="https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L317">https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L317</a>). The function is called to complete a read request by verifying the transferred integrity metadata and then calls the original bio end_io function (<a href="https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L313">https://elixir.bootlin.com/linux/v6.1/source/block/bio-integrity.c#L313</a>).</p> <p>This is done to ensure that the data was not changed by mistake (like in a case of a bug or an hardware failure (<a href="https://www.quora.com/What-is-the-purpose-of-kintegrityd-Linux-Kernel-Daemon/answer/Liran-Ben-Haim">https://www.quora.com/What-is-the-purpose-of-kintegrityd-Linux-Kernel-Daemon/answer/Liran-Ben-Haim</a>). This mechanism is also called “bio data integrity extensions“. And it allows the user to get protection for the entire flow: from the application to storage device. The implementation is transparent to the application itself and it is part of the block layer (<a href="https://www.kernel.org/doc/Documentation/block/data-integrity.txt">https://www.kernel.org/doc/Documentation/block/data-integrity.txt</a>).</p> <p>Moreover, in order for it to work we should enable CONFIG_BLK_DEV_INTEGRITY, which is defined as “Block layer data integrity support” (<a href="https://elixir.bootlin.com/linux/v6.1/source/block/Kconfig#L60">https://elixir.bootlin.com/linux/v6.1/source/block/Kconfig#L60</a>). The filesystem does not have to be aware that the block device can include integrity metadata. The metadata is generated as part of the block layer when calling the submit_bio() function (<a href="https://www.kernel.org/doc/Documentation/block/data-integrity.txt">https://www.kernel.org/doc/Documentation/block/data-integrity.txt</a>). We can toggle the writing of metadata using “/sys/block/&lt;BlockDevice&gt;/integrity/write_generate“ and the verification of the metadata using “/sys/block/&lt;BlockDevice&gt;/integrity/read_verify” — as shown in the screenshot below.</p> <p>Lastly, there are also file systems which are integrity aware (and they will generate/verify the metadata). There are also options for sending the metadata information from userspace, for more information I suggest reading <a href="https://www.kernel.org/doc/Documentation/block/data-integrity.txt">https://www.kernel.org/doc/Documentation/block/data-integrity.txt</a>.</p> <p>&#x200B;</p> <p><a href="https://preview.redd.it/dqqb3xw0rrwa1.jpg?width=1032&amp;format=pjpg&amp;auto=webp&amp;s=d238b50f56a0c5ee7b28e6611b7a651080fbceba">https://preview.redd.it/dqqb3xw0rrwa1.jpg?width=1032&amp;format=pjpg&amp;auto=webp&amp;s=d238b50f56a0c5ee7b28e6611b7a651080fbceba</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/boutnaru"> /u/boutnaru </a> <br/> <span><a href="https://www.reddit.com/r/linux/comments/132leqd/the_linux_process_journey_kintegrityd/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/linux/comments/132leqd/the_linux_process_journey_kintegrityd/">[comments]</a></span>