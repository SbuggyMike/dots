<h2 id="spring-cleaning">Spring cleaning</h2>
<p>Let me start by saying this. Over the time I have accumulated some cruft (in this case function) that needed to be gone. Partly because some of the functionalities are built in and partly because my solutions were honestly nonsensical.</p>
<p>Now I have cleaned up the modules at issue today and we can go on talking about the remaining functions that are still of use to me.</p>
<img src="https://macowners.club/images/emacs_fuzzy_matching.gif" style="display: inline; float: left; margin: 0px 40px;" width="" />
<h2 id="the-remaining-stuff">The remaining stuff</h2>
<h3 id="windows-splitting">Windows splitting</h3>
<p>This are my versions of commands to split windows. The built in versions (split-window-below &amp; split-window-right) do keep the cursor in the original window. I don’t like that one bit. About 95% of the time when I split a window, I want the cursor to follow and perform whatever task in the new window. Hence these two simple functions:</p>
<h4 id="split-like-i-think">Split like I think</h4>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-split-and-follow-below <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Split the selected window in two with the new window is bellow.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">This uses </span><span style="color: #a3be8c;">`split-window-below'</span><span style="color: #a3be8c;"> but follows with the cursor."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>split-window-below<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>other-window <span style="color: #b48ead;">1</span><span style="color: #eceff4;">))</span>
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-split-and-follow-right <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Split the selected window in two with the new window is to the right.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">This uses </span><span style="color: #a3be8c;">`split-window-right'</span><span style="color: #a3be8c;"> but follows with the cursor."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>split-window-right<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>other-window <span style="color: #b48ead;">1</span><span style="color: #eceff4;">))</span>
</span></span></code></pre></div><h4 id="find-me-a-file-but-not-here">Find me a file - but not here</h4>
<p>I addition to splitting the window the following two functions put straight me into a minibuffer <code>find-file</code> completion.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-find-file-below <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Open file with </span><span style="color: #a3be8c;">`find-file'</span><span style="color: #a3be8c;"> &amp; </span><span style="color: #a3be8c;">`read-file-name'</span><span style="color: #a3be8c;"> in a split window bellow."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>split-window-below<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>other-window <span style="color: #b48ead;">1</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>find-file <span style="color: #eceff4;">(</span>read-file-name <span style="color: #a3be8c;">"Find file: "</span> <span style="color: #8fbcbb;">nil</span><span style="color: #eceff4;">)</span> <span style="color: #8fbcbb;">t</span><span style="color: #eceff4;">))</span>
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-find-file-right <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Open file with </span><span style="color: #a3be8c;">`find-file'</span><span style="color: #a3be8c;"> &amp; </span><span style="color: #a3be8c;">`read-file-name'</span><span style="color: #a3be8c;"> in a split window to the right."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>split-window-right<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>other-window <span style="color: #b48ead;">1</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>find-file <span style="color: #eceff4;">(</span>read-file-name <span style="color: #a3be8c;">"Find file: "</span> <span style="color: #8fbcbb;">nil</span><span style="color: #eceff4;">)</span> <span style="color: #8fbcbb;">t</span><span style="color: #eceff4;">))</span>
</span></span></code></pre></div><h4 id="split-at-the-bottom">Split at the bottom</h4>
<p>This one creates a spit bellow all other windows in the frame.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-split-bellow-all <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Split the current buffer horizontally with new window bellow all other one.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">The size ratio is 60 (top) to 40 (bottom).
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">Credit: https://emacs.stackexchange.com/a/60459/30874."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>split-window
</span></span><span style="display: flex;"><span>   <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">frame-root-window</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>   <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">truncate</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">*</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">window-total-height</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">frame-root-window</span><span style="color: #eceff4;">))</span> <span style="color: #b48ead;">0.60</span><span style="color: #eceff4;">))</span> <span style="color: #a3be8c;">'below</span><span style="color: #eceff4;">))</span>
</span></span></code></pre></div><h4 id="i-don-t-like-this-order">I don’t like this order</h4>
<p>When two windows are showing it can be useful or even warranted to switch the orientation of these:</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-toggle-split-direction <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Toggle window split from vertical to horizontal.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">This work the other way around as well.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">Credit: https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el"</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">if</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">&gt;</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">length</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">window-list</span><span style="color: #eceff4;">))</span> <span style="color: #b48ead;">2</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span><span style="color: #bf616a;">error</span> <span style="color: #a3be8c;">"Can't toggle with more than 2 windows"</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">let</span> <span style="color: #eceff4;">((</span>was-full-height <span style="color: #eceff4;">(</span>window-full-height-p<span style="color: #eceff4;">)))</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span>delete-other-windows<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">if</span> was-full-height
</span></span><span style="display: flex;"><span>          <span style="color: #eceff4;">(</span>split-window-vertically<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>        <span style="color: #eceff4;">(</span>split-window-horizontally<span style="color: #eceff4;">))</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">save-selected-window</span>
</span></span><span style="display: flex;"><span>        <span style="color: #eceff4;">(</span>other-window <span style="color: #b48ead;">1</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>        <span style="color: #eceff4;">(</span>switch-to-buffer <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">other-buffer</span><span style="color: #eceff4;">))))))</span>
</span></span></code></pre></div><h3 id="elevate-me">Elevate me</h3>
<p>Some of the files that need editing of course require root privileges.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-find-file-as-root <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Like </span><span style="color: #a3be8c;">`find-file'</span><span style="color: #a3be8c;">, but automatically edit the file with root-privileges.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">This uses Tramp to apend sudo to path, if the file is not writable by user."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">let</span> <span style="color: #eceff4;">((</span>file <span style="color: #eceff4;">(</span>read-file-name <span style="color: #a3be8c;">"Open file as root: "</span><span style="color: #eceff4;">)))</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">if</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">file-writable-p</span> file<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>        <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">progn</span>
</span></span><span style="display: flex;"><span>          <span style="color: #eceff4;">(</span>find-file file<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>          <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">message</span> <span style="color: #a3be8c;">"File is writable, no need to open as root."</span><span style="color: #eceff4;">))</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span>find-file <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">concat</span> <span style="color: #a3be8c;">"/sudo::"</span> file<span style="color: #eceff4;">)))))</span>
</span></span></code></pre></div><h3 id="what-about-tabs">What about tabs?</h3>
<p>The tab feature in Emacs is quite welcome addition, But I like my new tabs to always be created visiting the scratch buffer. Bare in mind <code>timu-scratch-create</code> in this command is a custom function as well. It will however be handled in a later post. For all intense and purposes for now it can be substituted by <code>startup--get-buffer-create-scratch</code>.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-tab-bar-new-tab <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Create a new tab an then switch to the scratch buffer.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">If it has been closed, then create one."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>tab-bar-new-tab<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>timu-scratch-create<span style="color: #eceff4;">))</span>
</span></span></code></pre></div><p>This one helps reducing the keybindings needed for navigating tabs. Either switch to the next tab or create a new one.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-switch-or-new-tab <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Switch to the next tab if there are more than 1 tab.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">Create a new tab if there are just 1 tab."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">if</span> <span style="color: #eceff4;">(</span>length&gt; <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">frame-parameter</span> <span style="color: #8fbcbb;">nil</span> <span style="color: #a3be8c;">'tabs</span><span style="color: #eceff4;">)</span> <span style="color: #b48ead;">1</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>      <span style="color: #eceff4;">(</span>tab-bar-switch-to-next-tab<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span>timu-nav-tab-bar-new-tab<span style="color: #eceff4;">)))</span>
</span></span></code></pre></div><h3 id="pop-the-windows">Pop the windows!</h3>
<p><a href="https://github.com/karthink/popper">popper.el</a> is a package that now belongs in my arsenal. Effectively it is a corner stone of my navigation. This one sometimes help me to see all the popup windows at once.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-popper-toggle-all <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Toggle all pupups at once with </span><span style="color: #a3be8c;">`popper.el'</span><span style="color: #a3be8c;">."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>popper-toggle-latest <span style="color: #b48ead;">16</span><span style="color: #eceff4;">))</span>
</span></span></code></pre></div><h3 id="let-s-find-stuff">Let’s find stuff</h3>
<p>Both CLI commands <code>ripgrep</code> and <code>find</code> get a good use by <a href="https://github.com/minad/consult">consult</a> (which is part of my completion system) for searching.</p>
<p>Both consult commands at issue here (<code>consult-ripgrep</code> &amp; <code>consult-find</code>) start the search in the <code>default-directory</code>. I however do like to select the starting directory first. This is possible with the universal argument. Hence the following to functions.</p>
<p><strong>Searching file contents:</strong></p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-consult-rg <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Function for </span><span style="color: #a3be8c;">`consult-ripgrep'</span><span style="color: #a3be8c;"> with the </span><span style="color: #a3be8c;">`universal-argument'</span><span style="color: #a3be8c;">."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>consult-ripgrep <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">list</span> <span style="color: #b48ead;">4</span><span style="color: #eceff4;">)))</span>
</span></span></code></pre></div><p><strong>Searching file names:</strong></p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-consult-fd <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Function for </span><span style="color: #a3be8c;">`consult-find'</span><span style="color: #a3be8c;"> with the </span><span style="color: #a3be8c;">`universal-argument'</span><span style="color: #a3be8c;">."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>consult-find <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">list</span> <span style="color: #b48ead;">4</span><span style="color: #eceff4;">)))</span>
</span></span></code></pre></div><h3 id="where-is-my-project">Where is my project?</h3>
<p>Whenever I want to go to a project I always – I mean always – want to open a file. The default command <code>project-switch-project</code> However gives me some options/actions (including Eshell, VC-Dir and more). This is the reason for the following simple function.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-project-switch-project <span style="color: #eceff4;">(</span>dir<span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"\"Switch\" to another project by running an Emacs command.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">Directly use </span><span style="color: #a3be8c;">`project-find-file'</span><span style="color: #a3be8c;"> instead of getting prompted.
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">When called in a program, it will use the project corresponding
</span></span></span><span style="display: flex;"><span><span style="color: #a3be8c;">to directory DIR."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span> <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">list</span> <span style="color: #eceff4;">(</span>project-prompt-project-dir<span style="color: #eceff4;">)))</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">let</span> <span style="color: #eceff4;">((</span>project-current-directory-override dir<span style="color: #eceff4;">))</span>
</span></span><span style="display: flex;"><span>    <span style="color: #eceff4;">(</span>project-find-file<span style="color: #eceff4;">)))</span>
</span></span></code></pre></div><h3 id="bring-emacs-to-the-system">Bring emacs to the system</h3>
<p>With the help of the package <a href="https://github.com/tecosaur/emacs-everywhere">emacs-everywhere</a> I can edit the content of most text areas/boxes in macOS within an Emacs pop-up window.</p>
<p>In case I already started typing text this functions helps with the populating of the Emacs pop-up with that text.</p>
<div class="highlight"><pre tabindex="0"><code class="language-emacs-lisp"><span style="display: flex;"><span><span style="color: #eceff4;">(</span><span style="color: #81a1c1;">defun</span> timu-nav-emacs-everywhere-copy <span style="color: #eceff4;">()</span>
</span></span><span style="display: flex;"><span>  <span style="color: #a3be8c;">"Copy the contents of the text area to be edited."</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span><span style="color: #81a1c1;">interactive</span><span style="color: #eceff4;">)</span>
</span></span><span style="display: flex;"><span>  <span style="color: #eceff4;">(</span>do-applescript
</span></span><span style="display: flex;"><span>   <span style="color: #eceff4;">(</span><span style="color: #88c0d0;">concat</span>
</span></span><span style="display: flex;"><span>    <span style="color: #a3be8c;">"set frontmostApplication to path to frontmost application\n"</span>
</span></span><span style="display: flex;"><span>    <span style="color: #a3be8c;">"tell application \"System Events\"\n"</span>
</span></span><span style="display: flex;"><span>    <span style="color: #a3be8c;">"	keystroke \"c\" using {command down}\n"</span>
</span></span><span style="display: flex;"><span>    <span style="color: #a3be8c;">"end tell\n"</span><span style="color: #eceff4;">)))</span>
</span></span></code></pre></div><h2 id="the-end">The end</h2>
<p>Granted some functions here can be simply <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Lambda-Expressions.html">lambdas</a> in the definition of keybindings. However I like the order creaaating custom functions – however small (and maybe superfluous) they are – provides me. Sue me! ;)</p>