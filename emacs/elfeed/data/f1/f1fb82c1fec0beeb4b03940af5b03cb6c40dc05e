<p>
As I'm nearing the end of my time with my current employer I thought I'd put
together some bits of practical Haskell that I've put into production. We only
have a few services in Haskell, and basically I've had to sneak them into
production. I'm hoping someone will find something useful. I'd be even happier
if I get pointers on how to do this even better.
</p>

<div class="outline-2" id="outline-container-org3790afb">
<h2 id="org3790afb">Logging</h2>
<div class="outline-text-2" id="text-org3790afb">
<p>
I've written about that earlier in three posts:
</p>

<ol class="org-ol">
<li><a href="https://magnus.therning.org/2023-01-29-a-take-on-log-messages.html">A take on log messages</a></li>
<li><a href="https://magnus.therning.org/2023-02-04-a-take-on-logging.html">A take on logging</a></li>
<li><a href="https://magnus.therning.org/2023-02-08-logging-with-class.html">Logging with class</a></li>
</ol>
</div>
</div>

<div class="outline-2" id="outline-container-org377fbff">
<h2 id="org377fbff">Final exception handler</h2>
<div class="outline-text-2" id="text-org377fbff">
<p>
After reading about the <i>uncaught exception handler</i> in <a href="https://serokell.io/blog/uncaught-exception-handling">Serokell's article</a> I've
added the following snippet to all the services.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">main</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">main</span> <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    <span class="org-haskell-operator">...</span>
    originalHandler <span class="org-haskell-operator">&lt;-</span> getUncaughtExceptionHandler
    setUncaughtExceptionHandler <span class="org-haskell-operator">$</span> handle originalHandler <span class="org-haskell-operator">.</span> lastExceptionHandler logger
    <span class="org-haskell-operator">...</span>

<span class="org-haskell-definition">lastExceptionHandler</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">Logger</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">SomeException</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">lastExceptionHandler</span> logger e <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    fatalIO logger <span class="org-haskell-operator">$</span> lm <span class="org-haskell-operator">$</span> <span class="org-string">"uncaught exception: "</span> <span class="org-haskell-operator">&lt;&gt;</span> displayException e
</pre>
</div>
</div>
</div>

<div class="outline-2" id="outline-container-orgc085bc5">
<h2 id="orgc085bc5">Handling signals</h2>
<div class="outline-text-2" id="text-orgc085bc5">
<p>
To make sure the platform we're running our services on is happy with a service
it needs to handle <code>SIGTERM</code>, and when running it locally during development,
e.g. for manual testing, it's nice if it also handles <code>SIGINT</code>.
</p>

<p>
The following snippet comes from a service that needs to make sure that every
iteration of its processing is completed before shutting down, hence the <code>IORef</code>
that's used to signal whether procession should continue or not.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">main</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">main</span> <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    <span class="org-haskell-operator">...</span>
    cont <span class="org-haskell-operator">&lt;-</span> newIORef <span class="org-haskell-constructor">True</span>
    void <span class="org-haskell-operator">$</span> installHandler softwareTermination <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Catch</span> <span class="org-haskell-operator">$</span> sigHandler logger cont<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-constructor">Nothing</span>
    void <span class="org-haskell-operator">$</span> installHandler keyboardSignal <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-constructor">Catch</span> <span class="org-haskell-operator">$</span> sigHandler logger cont<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-constructor">Nothing</span>
    <span class="org-haskell-operator">...</span>

<span class="org-haskell-definition">sigHandler</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">Logger</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IORef</span> <span class="org-haskell-type">Bool</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">sigHandler</span> logger cont <span class="org-haskell-operator">=</span> <span class="org-haskell-keyword">do</span>
    infoIO logger <span class="org-string">"got a signal, shutting down"</span>
    writeIORef cont <span class="org-haskell-constructor">False</span>
</pre>
</div>
</div>
</div>

<div class="outline-2" id="outline-container-org0553b14">
<h2 id="org0553b14">Probes</h2>
<div class="outline-text-2" id="text-org0553b14">
<p>
Due to some details about how networking works in our platform it's currently
not possible to use network-based probing. Instead we have to use files. There
are two probes that are of interest
</p>

<ul class="org-ul">
<li>A startup probe, existance of the file signals that the service has started as
is about being processing.</li>
<li>A progress probe, a timestamp signals the time the most recent iteration of
processing finished<sup><a class="footref" href="https://magnus.therning.org/feed.xml#fn.1" id="fnr.1">1</a></sup>.</li>
</ul>

<p>
I've written a little bit about the latter before in <a href="https://magnus.therning.org/2022-05-08-a-little-haskell:-epoch-timestamp.html">A little Haskell: epoch
timestamp</a>, but here I'm including both functions.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-haskell-definition">createPidFile</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">FilePath</span> <span class="org-haskell-operator">-&gt;</span> <span class="org-haskell-type">IO</span> <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">createPidFile</span> fn <span class="org-haskell-operator">=</span> getProcessID <span class="org-haskell-operator">&gt;&gt;=</span> writeFile fn <span class="org-haskell-operator">.</span> show

<span class="org-haskell-definition">writeTimestampFile</span> <span class="org-haskell-operator">::</span> <span class="org-haskell-type">MonadIO</span> m <span class="org-haskell-operator">=&gt;</span> <span class="org-haskell-type">FilePath</span> <span class="org-haskell-operator">-&gt;</span> m <span class="org-haskell-constructor"><span class="org-rainbow-delimiters-depth-1">()</span></span>
<span class="org-haskell-definition">writeTimestampFile</span> fn <span class="org-haskell-operator">=</span> liftIO <span class="org-haskell-operator">$</span> <span class="org-haskell-keyword">do</span>
    getPOSIXTime <span class="org-haskell-operator">&gt;&gt;=</span> <span class="org-rainbow-delimiters-depth-1">(</span>writeFile fn <span class="org-haskell-operator">.</span> show<span class="org-rainbow-delimiters-depth-1">)</span> <span class="org-haskell-operator">.</span> truncate <span class="org-haskell-operator">@</span><span class="org-haskell-keyword">_</span> <span class="org-haskell-operator">@</span><span class="org-haskell-constructor">Int64</span> <span class="org-haskell-operator">.</span> <span class="org-rainbow-delimiters-depth-1">(</span><span class="org-haskell-operator">*</span> 1000<span class="org-rainbow-delimiters-depth-1">)</span>
</pre>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a class="footnum" href="https://magnus.therning.org/feed.xml#fnr.1" id="fn.1">1</a></sup> <div class="footpara"><p class="footpara">
The actual probing is then done using a command that compares the saved
timestamp with the current time. As long as the difference is smaller than a
threshold the probe succeeds.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://magnus.therning.org/tags.html">Tags</a>: <a href="https://magnus.therning.org/tag-haskell.html">haskell</a> </div>