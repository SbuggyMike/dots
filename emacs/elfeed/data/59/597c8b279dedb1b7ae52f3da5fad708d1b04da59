<p>If you’re into programming puzzles you probably know that there’s a whole class
of problems about doing something (e.g. some calculations) with the digits of a
number. This means you need to break down a number into its digits first. I’ve
always assumed that those problems exist just because decomposing a number to
its digits is a classic example of recursion:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">digits</span><span class="w"> </span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nb">&lt;</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w">
    </span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w">
    </span><span class="p">(</span><span class="nb">conj</span><span class="w"> </span><span class="p">(</span><span class="nf">digits</span><span class="w"> </span><span class="p">(</span><span class="nb">quot</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="mi">10</span><span class="p">))</span><span class="w"> </span><span class="p">(</span><span class="nb">rem</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="mi">10</span><span class="p">))))</span><span class="w">

</span><span class="p">(</span><span class="nf">digits</span><span class="w"> </span><span class="mi">3361346435</span><span class="p">)</span><span class="w">
</span><span class="c1">;; =&gt; [3 3 6 1 3 4 6 4 3 5]</span><span class="w">
</span></code></pre></div></div>

<p>That being said, I’ve also noticed that many people are approaching the problem
differently when faced with it (including me) - they typically convert the
number to string and then convert back the digit characters into
numbers. Probably the simplest way to do this is something like this:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">digits</span><span class="w"> </span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="o">#</span><span class="p">(</span><span class="nf">read-string</span><span class="w"> </span><span class="p">(</span><span class="nb">str</span><span class="w"> </span><span class="n">%</span><span class="p">))</span><span class="w"> </span><span class="p">(</span><span class="nb">str</span><span class="w"> </span><span class="n">n</span><span class="p">)))</span><span class="w">

</span><span class="p">(</span><span class="nf">digits</span><span class="w"> </span><span class="mi">3361346435</span><span class="p">)</span><span class="w">
</span><span class="c1">;; =&gt; (3 3 6 1 3 4 6 4 3 5)</span><span class="w">
</span></code></pre></div></div>

<p>Notably, this solution doesn’t require using the Java interop or any clever tricks.
If you know Java’s API a bit better you might think of leveraging <code class="language-plaintext highlighter-rouge">Character/digit</code> instead:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">digits</span><span class="w"> </span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="o">#</span><span class="p">(</span><span class="nf">Character/digit</span><span class="w"> </span><span class="n">%</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="nb">str</span><span class="w"> </span><span class="n">n</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p>Much simpler, right? Now it’s time for the final approach to solving the problem that is relatively common - namely a simple but clever trick to convert digit characters into numbers:</p>

<div class="language-clojure highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">char-&gt;int</span><span class="w"> </span><span class="p">[</span><span class="n">c</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">-</span><span class="w"> </span><span class="p">(</span><span class="nb">int</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="mi">48</span><span class="p">))</span><span class="w">

</span><span class="p">(</span><span class="k">defn</span><span class="w"> </span><span class="n">digits</span><span class="w"> </span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="w">
  </span><span class="p">(</span><span class="nb">map</span><span class="w"> </span><span class="n">char-&gt;int</span><span class="w"> </span><span class="p">(</span><span class="nb">str</span><span class="w"> </span><span class="n">n</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p>This relies on the fact that the integer value for <code class="language-plaintext highlighter-rouge">\0</code> is 48, for <code class="language-plaintext highlighter-rouge">\1</code> is 49 and so on. For some reason that’s my favorite solution - probably because I love programming puzzles and I like (occasionally) writing unreadable code.</p>

<p>So, who has a different approach for converting a number to its digits? I’ve to hear about it!</p>