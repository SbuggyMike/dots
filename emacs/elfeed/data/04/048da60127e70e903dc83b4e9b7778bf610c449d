<!-- SC_OFF --><div class="md"><p>I wrote a function which generates compile-command by seeing the file extension</p> <p>I use this function in my .dir-locals.el where all my files are kept.</p> <p>(Note : You might feel like the code is noobish)</p> <p>Function:</p> <p><code>(define ethan/file-compile-command ()</code></p> <p><code>(interactive)</code></p> <p><code>(let* ((file-name-full buffer-file-name)</code></p> <p><code>(file-ext (file-name-extension buffer-file-name))</code></p> <p><code>(file-name-without-extension (file-name-sans-extension buffer-file-name))</code></p> <p><code>(file-name-without-extension-and-path (file-name-base buffer-file-name)))</code></p> <p><code>(cond ((string= file-ext &quot;c&quot;) (setq ccommand (format &quot;gcc -o %s %s &amp;&amp; ./%s&quot;</code></p> <p><code>file-name-without-extension</code></p> <p><code>file-name-full</code></p> <p><code>file-name-without-extension-and-path)))</code></p> <pre><code> `((string= file-ext &quot;cpp&quot;) (setq ccommand (format &quot;g++ -o %s %s &amp;&amp; ./%s&quot;` </code></pre> <p><code>file-name-without-extension</code></p> <p><code>file-name-full</code></p> <p><code>file-name-without-extension-and-path)))</code></p> <pre><code> `((string= file-ext &quot;java&quot;) (setq ccommand (format &quot;javac %s &amp;&amp; java %s&quot;` </code></pre> <p><code>file-name-full</code></p> <p><code>file-name-without-extension)))</code></p> <pre><code> `((string= file-ext &quot;kt&quot;) (setq ccommand (format &quot;kotlinc %s -include-runtime -d %s.jar &amp;&amp; java -jar %s.jar&quot;` </code></pre> <p><code>file-name-full</code></p> <p><code>file-name-without-extension</code></p> <p><code>file-name-without-extension)))))</code></p> <p><code>(setq compile-command ccommand)</code></p> <p>but when I try to access tired it gives this error</p> <p>1&gt; from mini buffer</p> <p><code>Debugger entered--Lisp error: (wrong-type-argument stringp nil)</code></p> <p><code>file-name-nondirectory(nil)</code></p> <p><code>file-name-extension(nil)</code></p> <p><code>(let* ((file-name-full buffer-file-name) (file-ext (file-name-extension buffer-file-name)) (file-name-without-extension (file-name-sans-extension buffer-file-name)) (file-name-without-extension-and-path (file-name-base buffer-file-name))) (cond ((string= file-ext &quot;c&quot;) (setq ccommand (format &quot;gcc -o %s %s &amp;&amp; ./%s&quot; file-name-without-extension file-name-full file-name-without-extension-and-path))) ((string= file-ext &quot;cpp&quot;) (setq ccommand (format &quot;g++ -o %s %s &amp;&amp; ./%s&quot; file-name-without-extension file-name-full file-name-without-extension-and-path))) ((string= file-ext &quot;java&quot;) (setq ccommand (format &quot;javac %s &amp;&amp; java %s&quot; file-name-full file-name-without-extension))) ((string= file-ext &quot;kt&quot;) (setq ccommand (format &quot;kotlinc %s -include-runtime -d %s.jar &amp;&amp; java -jar...&quot; file-name-full file-name-without-extension file-name-without-extension)))))</code></p> <p><code>ethan/file-compile-command()</code></p> <p><code>eval((ethan/file-compile-command) t)</code></p> <p><code>hack-one-local-variable(eval (ethan/file-compile-command))</code></p> <p><code>hack-local-variables-apply()</code></p> <p><code>hack-dir-local-variables-non-file-buffer()</code></p> <p><code>dired-mode(&quot;~/Projects/Extra/c++/&quot; &quot;-alhg&quot;)</code></p> <p><code>dired-internal-noselect(&quot;~/Projects/Extra/c++/&quot; nil)</code></p> <p><code>dired-noselect(&quot;/Users/abhijeetsingh/Projects/Extra/c++/&quot; nil)</code></p> <p><code>#f(compiled-function (dirname &amp;optional switches) &quot;\&quot;Edit\&quot; directory DIRNAME--delete, rename, print, etc. some files in it.\nOptional second argument SWITCHES specifies the \</code>ls&#39; options used.\n(Interactively, use a prefix argument to be able to specify SWITCHES.)\n\nIf DIRNAME is a string, Dired displays a list of files in DIRNAME (which\nmay also have shell wildcards appended to select certain files).\n\nIf DIRNAME is a cons, its first element is taken as the directory name\nand the rest as an explicit list of files to make directory entries for.\nIn this case, SWITCHES are applied to each of the files separately, and\ntherefore switches that control the order of the files in the produced\nlisting have no effect.\n\n\&lt;dired-mode-map&gt;You can flag files for deletion with \[dired-flag-file-deletion] and then\ndelete them by typing \[dired-do-flagged-delete].\nType \[describe-mode] after entering Dired for more info.\n\nIf DIRNAME is already in a Dired buffer, that buffer is used without refresh.&quot; (interactive (dired-read-dir-and-switches &quot;&quot;)) #&lt;bytecode -0x127122f449790446&gt;)(&quot;/Users/abhijeetsingh/Projects/Extra/c++/&quot; nil)`</p> <p><code>ls-lisp--dired(#f(compiled-function (dirname &amp;optional switches) &quot;\&quot;Edit\&quot; directory DIRNAME--delete, rename, print, etc. some files in it.\nOptional second argument SWITCHES specifies the \</code>ls&#39; options used.\n(Interactively, use a prefix argument to be able to specify SWITCHES.)\n\nIf DIRNAME is a string, Dired displays a list of files in DIRNAME (which\nmay also have shell wildcards appended to select certain files).\n\nIf DIRNAME is a cons, its first element is taken as the directory name\nand the rest as an explicit list of files to make directory entries for.\nIn this case, SWITCHES are applied to each of the files separately, and\ntherefore switches that control the order of the files in the produced\nlisting have no effect.\n\n\&lt;dired-mode-map&gt;You can flag files for deletion with \[dired-flag-file-deletion] and then\ndelete them by typing \[dired-do-flagged-delete].\nType \[describe-mode] after entering Dired for more info.\n\nIf DIRNAME is already in a Dired buffer, that buffer is used without refresh.&quot; (interactive (dired-read-dir-and-switches &quot;&quot;)) #&lt;bytecode -0x127122f449790446&gt;) &quot;/Users/abhijeetsingh/Projects/Extra/c++/&quot;)`</p> <p><code>apply(ls-lisp--dired #f(compiled-function (dirname &amp;optional switches) &quot;\&quot;Edit\&quot; directory DIRNAME--delete, rename, print, etc. some files in it.\nOptional second argument SWITCHES specifies the \</code>ls&#39; options used.\n(Interactively, use a prefix argument to be able to specify SWITCHES.)\n\nIf DIRNAME is a string, Dired displays a list of files in DIRNAME (which\nmay also have shell wildcards appended to select certain files).\n\nIf DIRNAME is a cons, its first element is taken as the directory name\nand the rest as an explicit list of files to make directory entries for.\nIn this case, SWITCHES are applied to each of the files separately, and\ntherefore switches that control the order of the files in the produced\nlisting have no effect.\n\n\&lt;dired-mode-map&gt;You can flag files for deletion with \[dired-flag-file-deletion] and then\ndelete them by typing \[dired-do-flagged-delete].\nType \[describe-mode] after entering Dired for more info.\n\nIf DIRNAME is already in a Dired buffer, that buffer is used without refresh.&quot; (interactive (dired-read-dir-and-switches &quot;&quot;)) #&lt;bytecode -0x127122f449790446&gt;) &quot;/Users/abhijeetsingh/Projects/Extra/c++/&quot;)`</p> <p><code>dired(&quot;/Users/abhijeetsingh/Projects/Extra/c++/&quot;)</code></p> <p><code>dired-jump(nil nil)</code></p> <p><code>funcall-interactively(dired-jump nil nil)</code></p> <p><code>call-interactively(dired-jump nil nil)</code></p> <p><code>command-execute(dired-jump)</code></p> <p>2&gt; from Messages buffer</p> <p><code>dired-insert-subdir: Wrong type argument: integer-or-marker-p, nil</code></p> <p><code>dired-current-directory: No subdir-alist in c++</code></p> <p>Its night in my area so I might reply late, sorry for inconvenience and thanks for help ðŸ˜ƒ.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/Ethan045627"> /u/Ethan045627 </a> <br/> <span><a href="https://www.reddit.com/r/emacs/comments/w66tp5/weird_dired_error/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/emacs/comments/w66tp5/weird_dired_error/">[comments]</a></span>