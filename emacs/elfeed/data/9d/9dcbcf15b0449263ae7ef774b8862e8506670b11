<!-- SC_OFF --><div class="md"><p>Damn that&#39;s a mouthful. I don&#39;t know if anyone else is interested in this, but I&#39;ve been hacking away at making emacs play nicely with my ideal literate programming workflow with <code>org-mode</code>. Here&#39;s a sample of the file I&#39;m working on. The Macro stuff is about creating an HTML page for static hosting that will hold all documentation and code in a single file:</p> <pre><code>#+AUTHOR: granitrocky #+TITLE: Literate Programming Example -- Snake #+OPTIONS: H:3 toc:2 #+STARTUP: overview #+MACRO: setup-file (eval (if (eq org-export-current-backend &#39;html) &quot;#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup&quot;)) {{{setup-file}}} # Local Variables: # eval: (add-hook &#39;after-save-hook (lambda () (setq-local filename (org-html-export-to-html)) (rename-file filename &quot;docs/index.html&quot; t)) 0 t) # End: * Purpose This document is an attempt at putting a complete Bevy game and Design Document in a single file. We will be creating a document based on [[https://mbuffett.com/posts/bevy-snake-tutorial/][this tutorial]] ** Why? The reason for this workflow is to keep all our documentation and code in a single place. It&#39;s practice for creating a living org doc that will be my standard for creating projects in the future. That is, the code for this project is pulled directly from this document using ~org-babel~ * Specifications ** Use Bevy In our [[*Cargo File \[2022-07-19 Tue\]][Cargo File]], we define Bevy 0.7 as a dependency. Bevy allows us to create a game using ECS and built in 2D and 3D renderers and compile it to wasm32 for web games. In our case, we will be making a 2D snake game and embedding it in this file. ** Show a snake ** Move the snake ** Accept User input ** Grow the snake when it collects pellets ** End the game if the snake hits a wall or its tail ** OPTIONAL Keep a score * Code ** Cargo File [2022-07-19 Tue] :Code: #+begin_src conf-toml :tangle &quot;Cargo.toml&quot; [package] name = &quot;literate-snake&quot; version = &quot;0.1.0&quot; edition = &quot;2021&quot; [dependencies] bevy = &quot;0.7&quot; rand = &quot;0.7.3&quot; #+end_src ** Start The Game [2022-07-19 Tue] :Code: #+begin_src rust :tangle &quot;src/main.rs&quot; use bevy::prelude::*; fn main() { App::new() .run(); } #+end_src ** Systems ** Add Camera System [2022-07-20 Wed] :Code: #+begin_src rust :tangle &quot;src/main.rs&quot; fn add_camera(mut commands: Commands){ commands. } #+end_src ** </code></pre> <p>The real key thing here is that snippets of <code>main.rs</code> can be spread throughout the document as they need additional documentation. To do this, I had to make some wrappers around the <code>org-src-edit</code> functions.</p> <p>I am proud of this bit. On opening the <code>org-src</code> edit buffer, it reads the tangled file and deletes the part that is in the block we&#39;re editing. This gives the LSP engine, <code>eglot</code> in our case, the necessary data for completions.</p> <p>The real beauty is that the file block is hidden with narrowing and not saved when the code block we&#39;re editing is saved or closed</p> <pre><code>;; Make sure rustic gets activated in the org-src block and add the original file&#39;s source code. (defun org-babel-edit-prep:rust (babel-info) ;; This gets the second item in the &quot;babel-info&quot; list, which holds the code in the original src block (setq-local src-code (nth 1 babel-info)) (setq-local buffer-file-name (expand-file-name (-&gt;&gt; babel-info caddr (alist-get :tangle)))) (setq-local buffer-src-code (replace-regexp-in-string src-code &quot;&quot; (my-read-file-to-string (buffer-file-name)))) (goto-char (point-max)) (insert buffer-src-code) (narrow-to-region (point-min) (+ (point-min) (length src-code))) (rustic-mode) (org-src-mode))) (defun my-delete-hidden-text () &quot;Remove all text that would be revealed by a call to `widen&#39;&quot; (-let [p-start (point-max)] (widen) (delete-region p-start (point-max)))) (define-advice org-edit-src-exit (:before (&amp;rest _args) remove-src-block) (when (eq major-mode &#39;rustic-mode) (my-delete-hidden-text))) (define-advice org-edit-src-save (:before (&amp;rest _args) remove-src-block) (when (eq major-mode &#39;rustic-mode) (my-delete-hidden-text))) </code></pre> <p>Anyway, if anyone else finds this useful, or has any way to improve this, I&#39;d love to hear it.</p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/granitrocky"> /u/granitrocky </a> <br/> <span><a href="https://www.reddit.com/r/emacs/comments/w4f4u3/using_rustic_eglot_and_orgbabel_for_literate/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/emacs/comments/w4f4u3/using_rustic_eglot_and_orgbabel_for_literate/">[comments]</a></span>