<!-- SC_OFF --><div class="md"><p>This is the shell script that I use for capturing one of the following:</p> <ul> <li>Screen</li> <li>External audio (recorded through microphone)</li> <li>Internal audio (The audio sources running in your system, e.g. music that is currently playing)</li> <li>Screen + Internal audio</li> <li>Screen + External audio</li> </ul> <p>It uses <code>ffmpeg</code> and <code>rofi</code>.</p> <p>You can start capturing one of the above options by running the script and then stopping it by running it again.</p> <p>toggle-record:</p> <pre><code>#!/bin/bash FFMPEG_PID=$(ps -fC ffmpeg | awk &#39;/Recordings/ {print $2}&#39;) check_mic() { MUTE_STATUS=&quot;$(pacmd list-sources | awk &#39;/* index:/{f=1}f;&#39; | awk &#39;/muted:/ {print $2}&#39;)&quot; [ &quot;${MUTE_STATUS}&quot; == &quot;yes&quot; ] &amp;&amp; { notify-send --icon=dialog-error &quot;Please enable your microphone!&quot; exit } } ffmpeg_command() { while getopts &quot;a:v&quot; opt; do case &quot;$opt&quot; in a) AUDIO_SOURCE=&quot;$OPTARG&quot; ;; v) CAPTURE_SCREEN=true ;; *) echo &quot;ERROR: unknown flag!&quot; ;; esac done FILE_EXTENSION=&quot;mp3&quot; [ -n &quot;${AUDIO_SOURCE}&quot; ] &amp;&amp; AUDIO_PARAMS=&quot;-f pulse -ac 2 -ar 44100 -i ${AUDIO_SOURCE}&quot; [ &quot;${CAPTURE_SCREEN}&quot; == &quot;true&quot; ] &amp;&amp; { SCREEN_WIDTH=$(cat /sys/class/graphics/*/virtual_size | cut -f1 -d&#39;,&#39;) SCREEN_HEIGHT=$(cat /sys/class/graphics/*/virtual_size | cut -f2 -d&#39;,&#39;) VIDEO_PARAMS=&quot;-video_size ${SCREEN_WIDTH}x${SCREEN_HEIGHT} -framerate 16 -f x11grab -i :0.0&quot; FILE_EXTENSION=&quot;mp4&quot; } FFMPEG_COMMAND=&quot;ffmpeg ${VIDEO_PARAMS} ${AUDIO_PARAMS} ~/Recordings/$(date +%Y-%m-%d_%T).${FILE_EXTENSION} &amp; FFMPEG_PID=$!&quot; eval ${FFMPEG_COMMAND} } if [ -z &quot;${FFMPEG_PID}&quot; ]; then ANSWER=$(echo -e &quot;Screen\nScreen + External Audio\nScreen + Internal Audio\nExternal Audio\nInternal Audio&quot; | rofi -dmenu -p &quot;What do you want to capture?&quot;) [ -z &quot;${ANSWER}&quot; ] &amp;&amp; exit 0 INTERNAL_AUDIO_INPUT=&quot;$(pacmd list-sinks | awk &#39;/* index:/ {getline; print substr($2,2,length($2)-2)}&#39;).monitor&quot; case &quot;${ANSWER}&quot; in &quot;Screen&quot;) ffmpeg_command -v ;; &quot;Screen + External Audio&quot;) check_mic ffmpeg_command -v -a &quot;default&quot; ;; &quot;Screen + Internal Audio&quot;) ffmpeg_command -v -a &quot;${INTERNAL_AUDIO_INPUT}&quot; ;; &quot;External Audio&quot;) check_mic ffmpeg_command -a &quot;default&quot; ;; &quot;Internal Audio&quot;) ffmpeg_command -a &quot;${INTERNAL_AUDIO_INPUT}&quot; ;; esac notify-send --icon=record-desktop &quot;Recording started!&quot; else kill &quot;${FFMPEG_PID}&quot; notify-send --icon=record-desktop &quot;Recording finished!&quot; fi </code></pre> <p>I have two main problems with this script.</p> <p>1) When recording screen and external audio, the audio is cut off at the final seconds. I don&#39;t know why. [Maybe because I abruptly kill the <code>ffmpeg</code> process? Not sure.]</p> <p>2) The script has sometimes issues when my compositor (<code>picom</code>) is enabled. The frames switch between the currently focused window and some other [apparently random] window.</p> <p>&#x200B;</p> <p>P.S. You might need to change the script a bit to get your desired <code>${INTERNAL_AUDIO_INPUT}</code></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/i8ad8"> /u/i8ad8 </a> <br/> <span><a href="https://www.reddit.com/r/archlinux/comments/wc3m9g/simple_shell_script_for_capturing_screen_andor/">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/archlinux/comments/wc3m9g/simple_shell_script_for_capturing_screen_andor/">[comments]</a></span>