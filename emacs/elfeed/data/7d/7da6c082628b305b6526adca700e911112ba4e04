<p>In order to understand the context of this blog post, I recommend reading the previous <a href="https://chainsawriot.com/postmannheim/2023/03/13/stumpwm.html">blog</a> on <a href="https://stumpwm.github.io/">StumpWM</a>, <a href="https://awesomewm.org/">AwesomeWM</a>, and <a href="https://xmonad.org/">xmonad</a>. But a quick summary is that I need a window manager that can only do two things: (1) can use strange emacs-style key combinations, e.g. <code class="language-plaintext highlighter-rouge">C-. b</code> and (2) can do run-or-raise (run a software if it is not running; raise that software to my attention otherwise). I actually don’t need any tiling because I prefer full screen. Of course, no input lag issue like StumpWM. In the previous blog, I said xmonad fits my use case. Why switch again?</p>

<center><img src="https://chainsawriot.com/assets/sway.png" width="900" /></center>

<p>After using xmonad for over a month, I know that I don’t know enough Haskell to customize it any further. I at least know some Common Lisp and lua to hack StumpWM and AwesomeWM. All of my xmonad “customizations” so far were stealing things off github or guess work. I can’t comprehend my configuration file. Honestly, I have zero intention to learn Haskell just to configure xmonad. Without any Haskell knowledge, it also means that I don’t understand xmonad at all (<a href="https://xmonad.github.io/xmonad-docs/xmonad/XMonad-Config.html">the API documentation</a> is not easy to read without any knowledge in Haskell, for example). Overall, I am not 100% happy with xmonad. For example, I can never get things as fundamental as the darn <code class="language-plaintext highlighter-rouge">xmobar</code> to work on full screen. Also, there is a weird bug related to right click on Firefox (sometimes, the right click contextual menu disappears automatically; can “refresh” it by changing the xmonad layout). I am pretty sure it is an issue of xmonad, but I don’t know enough Haskell to fix it. See, I am such a bad software user.</p>

<p>So now, what’s next? My choice is <a href="https://swaywm.org/">Sway</a>. I think it’s better to write it as SwayWM, because searching for “sway” will probably give you Microsoft Sway. But let’s say Sway more to purge Microsoft’s search engine optimization.</p>

<p>This choice was made mainly because of this insightful post by <a href="https://sigkill.dk/blog/2019-06-30-how-to-make-sway-act-like-ratpoison.html">Troels Henriksen</a>. It actually addresses my first requirement of using strange emacs-style key combinations. A quick summary is this: By default, Sway (and its predecessor <a href="https://i3wm.org/">i3</a>) doesn’t support these emacs-(or Ratpoison-, or GNU Screen-, or Tmux-, or StumpWM-)style key combinations. Similar to AwesomeWM, it uses just one “modifier key” (<code class="language-plaintext highlighter-rouge">$mod</code>), usually gets mapped to the Super key. However, Sway has a VI-like modal configuration, which can be defined to do whatever one wants. Mode can be triggered by a two-key combination such as <code class="language-plaintext highlighter-rouge">C-t</code> (the default of StumpWM and Ratpoison). In order to make a mode works like StumpWM/Ratpoison, the trick is to do an action and then immediately switch back to the “default” mode. In the default configuration file, there is a defined mode called “resize”, which can be triggered by <code class="language-plaintext highlighter-rouge">$mod+r</code>. I can just modify that to make it works for me.</p>

<p>Another requirement is “run-or-raise”. Actually, I’ve come to realize that I actually don’t need to “run-or-raise”. What I need is just “raise” (or in Sway’s lingo: focus), if the program has been started by default. I also find that I only use “run-or-raise” for maybe just 4 things: emacs, firefox, terminal, and Spotify. However, it is still nice if I can have a working implementation of “run-or-raise”. Sway by default doesn’t have native “run-or-raise” support like StumpWM and xmonad. However, as Sway is mainly controlled through messages and there is a shell program called <code class="language-plaintext highlighter-rouge">swaymsg</code> to send those messages, I can emulate “run-or-raise”. For example, to “run or raise” Firefox, I can do this: <code class="language-plaintext highlighter-rouge">exec swaymsg "[app_id=firefox] focus" || exec firefox</code>. It is just like <code class="language-plaintext highlighter-rouge">bash</code>: If sending a message to focus the thing with <code class="language-plaintext highlighter-rouge">app_id=firefox</code> fails (i.e. with a non-zero exit code), execute the shell command <code class="language-plaintext highlighter-rouge">firefox</code>. Functionally, it is just run-or-raise.</p>

<p>I also like the fact that I can discover what I am doing myself. For example, non-Wayland software doesn’t have an <code class="language-plaintext highlighter-rouge">app_id</code> and emacs is one such software. <code class="language-plaintext highlighter-rouge">swaymsg -t get_tree</code> can show me all the relevant information as a json file, representing what Sway is seeing. And <code class="language-plaintext highlighter-rouge">man 5 sway</code> is easy to read (also available <a href="https://man.archlinux.org/man/sway.5.en">online</a>). I am able to experiment things on my shell, like typing: <code class="language-plaintext highlighter-rouge">swaymsg "[instance=emacs] focus"</code>. I have a REPL, similar to StumpWM’s <code class="language-plaintext highlighter-rouge">swank</code>.</p>

<p>In the end, I hack together a “stumpwm” mode in Sway like this and it works quite well for me:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mode <span class="s2">"stumpwm"</span> <span class="o">{</span>
     bindsym Return mode <span class="s2">"default"</span>
     bindsym Escape mode <span class="s2">"default"</span>
     bindsym g mode <span class="s2">"default"</span>
     bindsym Control+g mode <span class="s2">"default"</span>
     bindsym c <span class="nb">exec</span> <span class="nv">$term</span><span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym f fullscreen<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym Shift+c reload<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym bracketright <span class="nb">exec </span>rofi <span class="nt">-modi</span> drun <span class="nt">-show</span> drun<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym n focus left<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym p focus right<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym b <span class="nb">exec </span>swaymsg <span class="s2">"[app_id=firefox] focus"</span> <span class="o">||</span> <span class="nb">exec </span>firefox<span class="p">;</span> mode <span class="s2">"default"</span>
     bindsym e <span class="nb">exec </span>swaymsg <span class="s2">"[instance=emacs] focus"</span> <span class="o">||</span> <span class="nb">exec </span>emacsclient <span class="nt">-c</span><span class="p">;</span> mode <span class="s2">"default"</span>
<span class="o">}</span>
bindsym Control+period mode <span class="s2">"stumpwm"</span>
workspace_layout tabbed
</code></pre></div></div>

<p>Of course, it is not perfect. Unlike StumpWM or xmonad, typing <code class="language-plaintext highlighter-rouge">C-.</code> and then pressing something not defined in the mode still keeps me in the “stumpwm” mode. But one nice thing is that I have some visual clue in the menu bar (thanks god, I have a working menu bar by default!) so that I know I am still in the “stumpwm” mode. I can just quit, by using the emacs panic button <code class="language-plaintext highlighter-rouge">C-g</code> (or <code class="language-plaintext highlighter-rouge">g</code> or Return or Escape).</p>

<p>An added benefit of Sway is that it is a <a href="https://wiki.archlinux.org/title/wayland">Wayland compositor</a> (not X11). So far, I am quite happy with Sway. Let’s see how long this happiness can hold.</p>