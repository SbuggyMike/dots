<div>    <p>Emacs's <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Incremental-Search.html">incremental search</a> is very powerful. Rather than wait to show results until the search query is completely typed, it immediately begins searching once the first character is typed, updating the search as more letters are pressed. This makes it very responsive, and provides answers immediately.</p>    <p>But not everything is great about it.</p>    <p>By default, the incremental search doesn't provide any context. How many matches are there? Is this result near the beginning or the end?</p>    <p><img alt="incremental search, as default" src="https://zck.org/images/improved-emacs-search/default.png" /></p>    <p>Computers are better than humans at counting. Let's make Emacs count the matches for us.</p>    <code class="code-emacs-lisp">        <pre>(setq isearch-lazy-count t)</pre></code>    <p><img alt="Enabled lazy counting!" src="https://zck.org/images/improved-emacs-search/enabled.png" /></p>    <p>This feature is called <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Search-Customizations.html#index-isearch_002dlazy_002dcount">lazy counting</a>. I'm not sure if it's calling us lazy for using it, or saying that Emacs will lazily count the matches.</p>    <p>When enabled, Emacs displays the number of search results in the minibuffer, along with the index of the current search result. It's very useful to add context.</p>    <p>However, the default display is difficult to read. We can change that too.</p>    <code class="code-emacs-lisp">        <pre>(setq lazy-count-prefix-format nil)(setq lazy-count-suffix-format "   (%s/%s)")</pre></code>    <p>This puts the counts at the <em>end</em> of the search message, not the start.</p>    <p><img alt="A nice experience!" src="https://zck.org/images/improved-emacs-search/improved-enabled.png" /></p>    <p>Now that's a feature that counts!</p></div>