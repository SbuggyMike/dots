<p>Karthik has a nifty video on <a href="https://www.youtube.com/watch?v=UP2dFk5_ytY">how to change the way Emacs works</a>. We’re all fond of saying that Emacs is infinitely extensible and customizable but then we usually go out for a beer without saying how. Kathink remedies that by showing us how to change Emacs’s behavior even when we don’t know what we’re doing.</p>
<p>Kathink uses <a href="https://notmuchmail.org/">Notmuch</a> to read his email from within Emacs but he’s got a problem. He’s a developer so a lot his email includes a patch or a diff as a MIME attachment. That’s fine but most of the time he doesn’t want to see large patches or diffs. What he’d like is for those two MIME types to be folded by default so that they don’t clutter up his emails but so that he can unfold them when he does want to see their content.</p>
<p>He begins by saying he has no idea how Notmuch works but he doesn’t let that stop him from resolving the issue. What follows is his step-by-step discovery of how to solve his problem. He beings with the usual checking of the documentation and customize subsystems but, sadly, that was of no avail. Instead, he had to turn to the source code.</p>
<p>Notmuch has a lot of code, none of which he’s familiar with so it seems like an impossible task but Karthik shows definitively that that’s not the case. He doesn’t use a debugger or any fancy tools; he just burrows around in the code until he zeroes in on the solution. His method resonates with me because it’s pretty much what I do. Most of the time I don’t really know exactly where I’m heading but just follow the clues until I arrive at the solution. That’s exactly what Karthik does.</p>
<p>The video also demonstrates somethings that I already knew but didn’t appreciate enough until I saw them in action. The first of those is using <code>xref-find-defintions</code> to navigate through the code. The second is setting what Karthik calls “pins” to remember locations so that you can return to them at will. He does that with <code>point-to-register</code> to set the pin and <code>jump-to-register</code> to return to it.</p>
<p>This is a really good video and I recommend it to all Emacs users. It’s 29 minutes, 44 seconds so plan accordingly but <i>do</i> try to find the time.</p>
<p><b>Update</b> <span class="timestamp-wrapper"><span class="timestamp">[2022-08-01 Mon 13:10]</span></span>: Work → Works</p>