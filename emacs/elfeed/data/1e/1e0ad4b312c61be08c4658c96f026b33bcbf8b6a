<p>I’ve had this in my blog queue since April but it’s too good to let it fall into the bit bucket. Álvaro Ramírez has a problem with his <code>chatgpt-shell</code> package. He has some documentation in the form of tables, which are easy enough to generate but the package is still under development and the documentation is always changing.</p>
<p>Ramírez realized that Emacs is the self-documenting editor so it should be <a href="https://xenodium.com/generating-elisp-org-docs/">possible to generate the documentation directly from the Elisp</a>. That way, every time he updates the code, the documentation can be automatically regenerated. He had no idea how to do that but the nice thing about Emacs is that there are no secrets. He checked how the apropos commands gathered this information.</p>
<p>It turned out not to be too hard. The secret is to use the <code>mapatoms</code> command to cycle through the obarray that contains all the symbols in the current Emacs instance. Then it’s just a matter of checking if the symbol is for <code>chatgpt-shell</code> and is a custom variable. Grabbing the documentation for functions is similar. You can check out the code for both in Ramírez’s post.</p>
<p>There’s nothing specific to <code>chatgpt-shell</code> in any of this. You can use the same code, <i>mutatis mutandis</i>, for any package so it’s a worthwhile technique to know. If you’re maintaining a package and have even minimal documentation, you should definitely take a look at Ramírez’s post.</p>
<p><b>UPDATE</b> <span class="timestamp-wrapper"><span class="timestamp">[2023-05-12 Fri]</span></span>: Just noticed that I forgot the link to Ramírez’s post. Fixed.</p>