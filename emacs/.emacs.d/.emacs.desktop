;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Thu Dec  2 08:04:16 2021
;; Desktop file format version 208
;; Emacs version 27.2

;; Global section:
(setq desktop-saved-frameset [frameset 1 (25000 32256 481447 265000) (desktop . "208") "ajax@ithaca" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font . "-ADBO-Source Code Pro-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1") (font-parameter . "Source Code Pro 10") (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#f6f3e8") (background-color . "#242424") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tab-bar-lines . 0) (height . 44) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 16) (scroll-bar-height . 16) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . maximized) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#656565") (sticky) (environment) (last-focus-update . t) (frameset--id . "3CBE-C4CF-8405-FFDA") (frameset--mini t . t) (width . 158) (modeline . t) (unsplittable) (left . 0) (top . 27) (icon-name) (display . ":0.0") (explicit-name)) ((min-height . 8) (min-width . 10) (min-height-ignore . 4) (min-width-ignore . 4) (min-height-safe . 2) (min-width-safe . 2) (min-pixel-height . 136) (min-pixel-width . 80) (min-pixel-height-ignore . 68) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 34) (min-pixel-width-safe . 16)) vc (pixel-width . 1280) (pixel-height . 732) (total-width . 160) (total-height . 43) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 1280) (pixel-height . 170) (total-width . 160) (total-height . 10) (normal-height . 0.23224043715846998) (normal-width . 1.0) (buffer "*Summary nnrss:Recent Additions (England and Wales Court of Appeal (Civil Division) Decisions)*" (selected) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 10) (start . 1)) (prev-buffers ("*Group*" 1 217) ("Grant-The_Pensions_Ombudsman.org" 22363 23911) ("Winners And How They Succeed by Alastair Campbell (z-lib.org).epub.pdf" 1 1) ("*Buffer List*" 1 1) ("todo.org" 50704 51199) ("law_as_service.org" 1 465) ("reading.org" 467 2984) ("The sham doctrine and intention addressing the bilateral nature of sham trusts.pdf" 1 1) ("*GNU Emacs*" 1 77) ("*scratch*" 1 146))) (leaf (last . t) (pixel-width . 1280) (pixel-height . 562) (total-width . 160) (total-height . 33) (normal-height . 0.76775956284153) (normal-width . 1.0) (buffer "*w3m*" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 9682) (start . 9682)) (prev-buffers ("*Article nnrss:Recent Additions (England and Wales Court of Appeal (Civil Division) Decisions)*" 1 324) ("*Summary nnrss:Recent Additions (England and Wales Court of Appeal (Civil Division) Decisions)*" 1 4)))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '(#("Westmin" 0 7 (isearch-regexp-function nil isearch-case-fold-search nil)) #("ombudsm" 0 7 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring nil)
(setq register-alist nil)
(setq file-name-history '("~/.emacs.d/" "~/Nextcloud/law_misc/law_as_service.org" "~/Nextcloud/life_org/in_tray/Winners And How They Succeed by Alastair Campbell (z-lib.org).epub.pdf" "~/Nextcloud/law_phd/trustees/trustee_powers/Grant-The_Pensions_Ombudsman.org" "~/Nextcloud/life_org/reading.org" "~/Nextcloud/law_misc/articles/The sham doctrine and intention addressing the bilateral nature of sham trusts.pdf"))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/ajax/Nextcloud/law_phd/trustees/trustee_powers/Grant-The_Pensions_Ombudsman.org"
  "Grant-The_Pensions_Ombudsman.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  23911
  '(21064 nil)
  nil
  nil
  '((buffer-display-time 24999 41120 832855 389000) (buffer-file-coding-system . undecided-unix) (truncate-lines))
  '((mark-ring (9248 9188 9188 1 9123 9198 17233 17345 23893 21064 23911))))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/in_tray/Winners And How They Succeed by Alastair Campbell (z-lib.org).epub.pdf"
  "Winners And How They Succeed by Alastair Campbell (z-lib.org).epub.pdf"
  'pdf-view-mode
  nil
  1
  '(nil nil)
  t
  nil
  '((buffer-display-time 24999 40327 588662 281000) (buffer-file-coding-system . no-conversion))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/todo.org"
  "todo.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  51277
  '(51476 nil)
  nil
  nil
  '((buffer-display-time 24999 38228 462761 973000) (buffer-file-coding-system . utf-8-unix) (truncate-lines))
  '((mark-ring (51171 51095 1))))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/law_misc/law_as_service.org"
  "law_as_service.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  465
  '(408 nil)
  nil
  nil
  '((buffer-display-time 24999 26229 70218 928000) (buffer-file-coding-system . utf-8-unix) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/reading.org"
  "reading.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  2984
  '(nil nil)
  nil
  nil
  '((buffer-display-time 24999 18682 341681 153000) (buffer-file-coding-system . undecided-unix) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/law_misc/articles/The sham doctrine and intention addressing the bilateral nature of sham trusts.pdf"
  "The sham doctrine and intention addressing the bilateral nature of sham trusts.pdf"
  'pdf-view-mode
  nil
  1
  '(nil nil)
  t
  nil
  '((buffer-display-time 24998 46987 95335 767000) (buffer-file-coding-system . no-conversion))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  "*info*"
  'Info-mode
  nil
  251264
  '(nil nil)
  t
  '("/usr/share/info/emacs" "Bookmarks" ((history ("/usr/share/info/emacs" "Top" 1138) ("dir" "Top" 227))))
  '((tab-width . 8) (buffer-display-time 24998 44334 194362 229000) (buffer-file-coding-system . utf-8-unix) (case-fold-search . t))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/paid_work.org"
  "paid_work.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  1
  '(nil nil)
  nil
  nil
  '((buffer-display-time) (buffer-file-coding-system . undecided-unix) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/social.org"
  "social.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  529
  '(nil nil)
  nil
  nil
  '((buffer-display-time) (buffer-file-coding-system . undecided-unix) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/events.org"
  "events.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  1
  '(nil nil)
  nil
  nil
  '((buffer-display-time) (buffer-file-coding-system . undecided-unix) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/Nextcloud/life_org/exercise.org"
  "exercise.org"
  'org-mode
  '(abbrev-mode visual-line-mode flyspell-mode)
  1
  '(nil nil)
  nil
  nil
  '((buffer-display-time) (buffer-file-coding-system . undecided-dos) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/ajax/.newsrc-dribble"
  ".newsrc-dribble"
  'fundamental-mode
  nil
  17452
  '(nil nil)
  nil
  nil
  '((buffer-display-time))
  '((mark-ring nil)))

